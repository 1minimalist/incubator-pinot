/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.pinot.core.data.recordtransformer;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nullable;
import org.apache.pinot.common.utils.PinotDataType;
import org.apache.pinot.spi.data.FieldSpec;
import org.apache.pinot.spi.data.Schema;
import org.apache.pinot.spi.data.readers.GenericRow;


/**
 * The {@code DataTypeTransformer} class will convert the values to follow the data types in {@link FieldSpec}.
 * <p>NOTE: should put this after all the values has been generated by other transformers (such as
 * {@link NullValueTransformer} and {@link ExpressionTransformer}). After this, all values should be of the desired data
 * types.
 */
@SuppressWarnings("rawtypes")
public class DataTypeTransformer implements RecordTransformer {
  private static final Map<Class, PinotDataType> SINGLE_VALUE_TYPE_MAP = new HashMap<>();
  private static final Map<Class, PinotDataType> MULTI_VALUE_TYPE_MAP = new HashMap<>();

  static {
    SINGLE_VALUE_TYPE_MAP.put(Boolean.class, PinotDataType.BOOLEAN);
    SINGLE_VALUE_TYPE_MAP.put(Byte.class, PinotDataType.BYTE);
    SINGLE_VALUE_TYPE_MAP.put(Character.class, PinotDataType.CHARACTER);
    SINGLE_VALUE_TYPE_MAP.put(Short.class, PinotDataType.SHORT);
    SINGLE_VALUE_TYPE_MAP.put(Integer.class, PinotDataType.INTEGER);
    SINGLE_VALUE_TYPE_MAP.put(Long.class, PinotDataType.LONG);
    SINGLE_VALUE_TYPE_MAP.put(Float.class, PinotDataType.FLOAT);
    SINGLE_VALUE_TYPE_MAP.put(Double.class, PinotDataType.DOUBLE);
    SINGLE_VALUE_TYPE_MAP.put(String.class, PinotDataType.STRING);
    SINGLE_VALUE_TYPE_MAP.put(byte[].class, PinotDataType.BYTES);

    MULTI_VALUE_TYPE_MAP.put(Byte.class, PinotDataType.BYTE_ARRAY);
    MULTI_VALUE_TYPE_MAP.put(Character.class, PinotDataType.CHARACTER_ARRAY);
    MULTI_VALUE_TYPE_MAP.put(Short.class, PinotDataType.SHORT_ARRAY);
    MULTI_VALUE_TYPE_MAP.put(Integer.class, PinotDataType.INTEGER_ARRAY);
    MULTI_VALUE_TYPE_MAP.put(Long.class, PinotDataType.LONG_ARRAY);
    MULTI_VALUE_TYPE_MAP.put(Float.class, PinotDataType.FLOAT_ARRAY);
    MULTI_VALUE_TYPE_MAP.put(Double.class, PinotDataType.DOUBLE_ARRAY);
    MULTI_VALUE_TYPE_MAP.put(String.class, PinotDataType.STRING_ARRAY);
  }

  private final Map<String, PinotDataType> _dataTypes = new HashMap<>();

  public DataTypeTransformer(Schema schema) {
    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {
      if (!fieldSpec.isVirtualColumn()) {
        _dataTypes.put(fieldSpec.getName(), PinotDataType.getPinotDataType(fieldSpec));
      }
    }
  }

  @Override
  public GenericRow transform(GenericRow record) {
    for (Map.Entry<String, PinotDataType> entry : _dataTypes.entrySet()) {
      String column = entry.getKey();
      Object value = record.getValue(column);
      if (value == null) {
        continue;
      }
      PinotDataType dest = entry.getValue();
      value = standardize(record, column, value, dest.isSingleValue());
      // NOTE: The standardized value could be null for empty Collection/Map/Object[].
      if (value == null) {
        record.putValue(column, null);
        continue;
      }

      // Convert data type if necessary
      PinotDataType source;
      if (value instanceof Object[]) {
        // Multi-value column
        Object[] values = (Object[]) value;
        source = MULTI_VALUE_TYPE_MAP.get(values[0].getClass());
        if (source == null) {
          source = PinotDataType.OBJECT_ARRAY;
        }
      } else {
        // Single-value column
        source = SINGLE_VALUE_TYPE_MAP.get(value.getClass());
        if (source == null) {
          source = PinotDataType.OBJECT;
        }
      }
      if (source != dest) {
        if (source.getSingleValueType() != dest.getSingleValueType()) {
          putValueAsSetToKey(record, GenericRow.DATA_TYPE_MISMATCH_KEY, column);
        }
        value = dest.convert(value, source);
      }

      record.putValue(column, value);
    }
    return record;
  }

  /**
   * Standardize the value into supported types.
   * <ul>
   *   <li>Empty Collection/Map/Object[] will be standardized to null</li>
   *   <li>Single-entry Collection/Map/Object[] will be standardized to single value (map key is ignored)</li>
   *   <li>Multi-entries Collection/Map/Object[] will be standardized to Object[] (map key is ignored)</li>
   * </ul>
   */
  @VisibleForTesting
  @Nullable
  static Object standardize(GenericRow record, String column, @Nullable Object value, boolean isSingleValue) {
    return standardize(record, column, value, isSingleValue, 1);
  }

  static Object standardize(GenericRow record, String column, @Nullable Object value, boolean isSingleValue, int level) {
    if (value == null) {
      return null;
    }
    // If it's single-value column and the value is Collection/Map/Object[], mark the key.
    if (value instanceof Collection) {
      return standardizeCollection(record, column, (Collection) value, isSingleValue, level);
    }
    if (value instanceof Map) {
      // If it's a map structure, mark the key.
      putValueAsSetToKey(record, GenericRow.MULTI_VALUE_STRUCTURE_MISMATCH_KEY, column);
      Collection values = ((Map) value).values();
      return standardizeCollection(record, column, values, isSingleValue, level);
    }
    if (value instanceof Object[]) {
      if (isSingleValue && level == 1) {
        putValueAsSetToKey(record, GenericRow.SINGLE_VALUE_MULTI_VALUE_FIELD_MISMATCH_KEY, column);
      }
      Object[] values = (Object[]) value;
      int numValues = values.length;
      if (numValues == 0) {
        return null;
      }
      if (numValues == 1) {
        return standardize(record, column, values[0], isSingleValue, level + 1);
      }
      List<Object> standardizedValues = new ArrayList<>(numValues);
      for (Object singleValue : values) {
        Object standardizedValue = standardize(record, column, singleValue, true, level + 1);
        if (standardizedValue != null) {
          standardizedValues.add(standardizedValue);
        }
      }
      int numStandardizedValues = standardizedValues.size();
      if (numStandardizedValues == 0) {
        return null;
      }
      if (numStandardizedValues == 1) {
        return standardizedValues.get(0);
      }
      Preconditions.checkState(!isSingleValue, "Cannot read single-value from Object[]: %s for column: %s",
          Arrays.toString(values), column);
      return standardizedValues.toArray();
    }
    // If it's multi-value column and the level is 1, mark the key.
    if (!isSingleValue && level == 1) {
      putValueAsSetToKey(record, GenericRow.SINGLE_VALUE_MULTI_VALUE_FIELD_MISMATCH_KEY, column);
    }
    return value;
  }

  private static Object standardizeCollection(GenericRow record, String column, Collection collection, boolean isSingleValue, int level) {
    if (isSingleValue && level == 1) {
      putValueAsSetToKey(record, GenericRow.SINGLE_VALUE_MULTI_VALUE_FIELD_MISMATCH_KEY, column);
    }
    int numValues = collection.size();
    if (numValues == 0) {
      return null;
    }
    if (numValues == 1) {
      return standardize(record, column, collection.iterator().next(), isSingleValue, level + 1);
    }
    List<Object> standardizedValues = new ArrayList<>(numValues);
    for (Object singleValue : collection) {
      Object standardizedValue = standardize(record, column, singleValue, true, level + 1);
      if (standardizedValue != null) {
        standardizedValues.add(standardizedValue);
      }
    }
    int numStandardizedValues = standardizedValues.size();
    if (numStandardizedValues == 0) {
      return null;
    }
    if (numStandardizedValues == 1) {
      return standardizedValues.get(0);
    }
    Preconditions
        .checkState(!isSingleValue, "Cannot read single-value from Collection: %s for column: %s", collection, column);
    return standardizedValues.toArray();
  }

  private static void putValueAsSetToKey(GenericRow record, String key, String value) {
    Set<String> valueSet = (Set) record.getValue(key);
    if (valueSet == null) {
      valueSet = new HashSet<>();
      record.putValue(key, valueSet);
    }
    valueSet.add(value);
  }
}
